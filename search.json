[{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jolenesutton.github.io/gslSpatial/articles/assign_points.html","id":"get-a-shapefile","dir":"Articles","previous_headings":"","what":"Get a shapefile","title":"Assigning points to polygons","text":"Notice coordinate reference system (crs) lon/lat NAD83 (EPSG:4269). working spatial data, data crs. don’t, can re-project (e.g., ?terra::project).","code":"rv<-get_shapefile('rv.sgsl') #> sGSL September RV Survey  # see information about the object rv  #>  class       : SpatVector  #>  geometry    : polygons  #>  dimensions  : 27, 3  (geometries, attributes) #>  extent      : -65.9368, -60.0779, 45.6756, 49.1769  (xmin, xmax, ymin, ymax) #>  coord. ref. : lon/lat NAD83 (EPSG:4269)  #>  names       :    id  area trawlable. #>  type        : <int> <num>      <num> #>  values      :   401  1182  2.916e+04 #>                  402  1553  3.832e+04 #>                  403   388       9580  # plot it ggplot()+   geom_spatvector(data=rv,aes(fill=factor(id)))"},{"path":"https://jolenesutton.github.io/gslSpatial/articles/assign_points.html","id":"get-some-data","dir":"Articles","previous_headings":"","what":"Get some data","title":"Assigning points to polygons","text":"example uses commercial landings data longitude latitude coordinates crs shapefile.","code":"df<-dat.ziff[,c('longitude','latitude')] head(df) #>         longitude latitude #> 6546100  -60.4406  47.2421 #> 6547100  -60.4581  47.2281 #> 6548100  -60.4581  47.2281 #> 6549100  -60.3503  47.3175 #> 6550100  -60.3503  47.3175 #> 6551100  -60.3258  47.2961"},{"path":"https://jolenesutton.github.io/gslSpatial/articles/assign_points.html","id":"plot-everything","dir":"Articles","previous_headings":"","what":"Plot everything","title":"Assigning points to polygons","text":"many points inside polygons well outside polygons","code":"ggplot()+   geom_spatvector(data=rv)+   geom_point(data=df,aes(longitude,latitude))+   theme_bw()"},{"path":"https://jolenesutton.github.io/gslSpatial/articles/assign_points.html","id":"using-function-assign_points_terra","dir":"Articles","previous_headings":"","what":"Using function assign_points_terra","title":"Assigning points to polygons","text":"","code":"x<-assign_points_terra(df$longitude, df$latitude,rv) #> Processing points 1 to 1000. 18:43:21 #> Processing points 1001 to 2000. 18:43:21 #> Processing points 2001 to 3000. 18:43:21 #> Processing points 3001 to 4000. 18:43:21 #> Processing points 4001 to 4559. 18:43:21 head(x) #>          x       y assigned.polygon #> 1 -60.4406 47.2421              437 #> 2 -60.4581 47.2281              437 #> 3 -60.4581 47.2281              437 #> 4 -60.3503 47.3175              438 #> 5 -60.3503 47.3175              438 #> 6 -60.3258 47.2961              439  stratum<-x[,3]  # combine df1<-cbind(df,stratum) head(df1) #>         longitude latitude stratum #> 6546100  -60.4406  47.2421     437 #> 6547100  -60.4581  47.2281     437 #> 6548100  -60.4581  47.2281     437 #> 6549100  -60.3503  47.3175     438 #> 6550100  -60.3503  47.3175     438 #> 6551100  -60.3258  47.2961     439  ggplot()+   geom_spatvector(data=rv)+   geom_point(data=df1,aes(longitude,latitude,col=factor(stratum)))+   theme_bw()"},{"path":"https://jolenesutton.github.io/gslSpatial/articles/assign_points.html","id":"what-if-there-are-overlapping-polyons-use-function-assign_points_secr","dir":"Articles","previous_headings":"","what":"What if there are overlapping polyons? Use function assign_points_secr","title":"Assigning points to polygons","text":"overlapping polygons causing data points ‘belong’ multiple polygons, can use function assign_points_secr Start getting another shapefile. example uses Oceans Act Marine Protected Areas  order demonstrate function assign_points_secr, combine two shapefiles originally single shapefile.  Now use function assign_points_secr Using function table shows 69 points fall within area stratum 416 overlaps Banc-des-Américains Marine Protected Area. assigned points belong non-overlapping polygon areas.","code":"mpa<-get_shapefile('mpa') #> Oceans Act Marine Protected Areas, source:https://open.canada.ca  mpa #>  class       : SpatVector  #>  geometry    : polygons  #>  dimensions  : 11, 12  (geometries, attributes) #>  extent      : -64.14, -58.3667, 45.7833, 48.75004  (xmin, xmax, ymin, ymax) #>  coord. ref. : lon/lat NAD83 (EPSG:4269)  #>  names       : OBJECTID          NAME_E          NAME_F ZONE_E ZONE_F #>  type        :    <int>           <chr>           <chr>  <chr>  <chr> #>  values      :        1 Basin Head Mar~ Zone de protec~ Zone 3 Zone 3 #>                       2 Basin Head Mar~ Zone de protec~ Zone 1 Zone 1 #>                       3 Basin Head Mar~ Zone de protec~ Zone 2 Zone 2 #>            URL_E           URL_F      REGULATION       REGLEMENT   KM2 #>            <chr>           <chr>           <chr>           <chr> <num> #>  http://www.dfo~ http://www.dfo~ http://laws.ju~ http://laws.ju~  8.64 #>  http://www.dfo~ http://www.dfo~ http://laws.ju~ http://laws.ju~  0.24 #>  http://www.dfo~ http://www.dfo~ http://laws.ju~ http://laws.ju~  0.35 #>  Shape_Leng Shape_Area #>       <num>      <num> #>   1.519e+04  8.642e+06 #>        6510  2.416e+05 #>        5976  3.541e+05  ggplot()+   geom_spatvector(data=mpa,aes(fill=factor(NAME_E)),col='blue',lwd=1.25)+   geom_spatvector(data=rv,fill=NA,col='red')+   geom_point(data=dat.ziff,aes(longitude,latitude),alpha=0.5)+   theme_bw()+   theme(legend.position=\"bottom\",legend.title=element_blank())+   guides(fill=guide_legend(ncol=1,byrow=TRUE)) library('terra')  # first need to make names match names(rv) #> [1] \"id\"         \"area\"       \"trawlable.\" names(mpa) #>  [1] \"OBJECTID\"   \"NAME_E\"     \"NAME_F\"     \"ZONE_E\"     \"ZONE_F\"     #>  [6] \"URL_E\"      \"URL_F\"      \"REGULATION\" \"REGLEMENT\"  \"KM2\"        #> [11] \"Shape_Leng\" \"Shape_Area\"  rv$NAME<-as.character(rv$id) mpa$NAME<-as.character(mpa$NAME_E)  shape<-rbind(rv,mpa) shape<-shape[, c(\"NAME\")] shape #>  class       : SpatVector  #>  geometry    : polygons  #>  dimensions  : 38, 1  (geometries, attributes) #>  extent      : -65.9368, -58.3667, 45.6756, 49.1769  (xmin, xmax, ymin, ymax) #>  coord. ref. : lon/lat NAD83 (EPSG:4269)  #>  names       :  NAME #>  type        : <chr> #>  values      :   401 #>                  402 #>                  403 ggplot()+   geom_spatvector(data=shape,aes(fill=factor(NAME)),alpha=0.5)+   theme_bw()+   theme(legend.position=\"bottom\",legend.title=element_blank())+   guides(fill=guide_legend(nrow=8)) x<-assign_points_secr(dat.ziff[,'longitude'],                         dat.ziff[,'latitude'],                         shape,\"NAME\") #> Processing points 1 to 1000. 18:43:23 #> Processing points 1001 to 2000. 18:43:24 #> Processing points 2001 to 3000. 18:43:25 #> Processing points 3001 to 4000. 18:43:25 #> Processing points 4001 to 4559. 18:43:25  polygon<-x$assigned.polygon  df2<-cbind(dat.ziff,polygon) rbind(table(df2$polygon)) #>      415 416 416, Banc-des-Américains Marine Protected Area 417 418 419 420 422 #> [1,] 105 111                                             69  92  77  28  31  15 #>      423 424 425 426 427 428 429 431 433 434 435 436 437 438 439 #> [1,] 264  64 198   7  43   3  33  37   4   6 236  61 302  49 177 #>      Banc-des-Américains Marine Protected Area #> [1,]                                        15  ggplot()+   geom_spatvector(data=shape,fill=NA)+   geom_point(data=df2,aes(longitude,latitude,col=polygon),alpha=0.5)+   theme_bw()+   theme(legend.position=\"bottom\",legend.title=element_blank())+   guides(col=guide_legend(ncol=3))"},{"path":"https://jolenesutton.github.io/gslSpatial/articles/assign_points.html","id":"assigning-points-to-the-nearest-polygon","dir":"Articles","previous_headings":"","what":"Assigning points to the nearest polygon","title":"Assigning points to polygons","text":"Finally, previous examples show number data points don’t overlap polygons shapefiles. wanted find polygons closest ? use function assign_points_to_nearest_polygon. function takes bit longer run compared assign_points_terra assign_points_secr.","code":"# get the unassigned data points pts.outside<-df2[which(is.na(df2$polygon)),]  x<-assign_points_to_nearest_polygon(pts.outside$longitude, pts.outside$latitude, shape, 'NAME')  head(x) #>          x       y NAME n$distance #> 1 -60.2833 47.4666  439  1649.2764 #> 2 -60.3000 47.4666  439   944.1621 #> 3 -60.3000 47.4666  439   944.1621 #> 4 -60.2833 47.4833  439  3034.2767 #> 5 -60.3166 47.4833  439  1080.0245 #> 6 -60.2833 47.4833  439  3034.2767  ggplot()+   geom_spatvector(data=shape,fill=NA)+   geom_point(data=x,aes(x,y,col=NAME),alpha=0.5)+   theme_bw()+   theme(legend.position=\"bottom\",legend.title=element_blank())+   guides(col=guide_legend(ncol=6))"},{"path":"https://jolenesutton.github.io/gslSpatial/articles/working_with_rasters.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Working with raster objects","text":"Make square 10 km X 10 km grid cells GSL Summarise fishery catch data Export results either data frame SpatRaster","code":"library(gslSpatial) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(ggplot2) library(terra) library(tidyterra)"},{"path":"https://jolenesutton.github.io/gslSpatial/articles/working_with_rasters.html","id":"make-square-grids","dir":"Articles","previous_headings":"","what":"Make square grids","title":"Working with raster objects","text":"Use make_grid function, specifying grid cell size (resolution). Using resolution 10 makes grid cell 10 km X 10 km. finer resolution, longer take generate. default, function generates grid cells spanning NAFO 3Pn4RST, assigns corresponding NAFO division subdivision cell. resulting grid data frame. coordinates centers grid cells. Longitude latitude coordinates NAD83, EPSG:4269, decimal degrees. X Y coordinates NAD83, UTM zone 20N, units km.","code":"grid<-make_grid(10) #> Source: https://www.nafo.int #> Assigning NAFO divisions to 3141 grid cells. #> Processing points 1 to 1000. 18:43:54 #> Processing points 1001 to 2000. 18:44:03 #> Processing points 2001 to 3000. 18:44:17 #> Processing points 3001 to 3141. 18:44:24 class(grid) #> [1] \"data.frame\" head(grid) #>             X        Y area longitude latitude nafo.assigned #> 112  988.9978 5810.911    1 -55.83546 52.23061          <NA> #> 113  998.9978 5810.911   41 -55.69022 52.22166          <NA> #> 114 1008.9978 5810.911   92 -55.54506 52.21253            4R #> 115 1018.9978 5810.911   32 -55.39998 52.20322          <NA> #> 228  998.9978 5800.911   48 -55.70491 52.13248            4R #> 229 1008.9978 5800.911  100 -55.56003 52.12338            4R"},{"path":"https://jolenesutton.github.io/gslSpatial/articles/working_with_rasters.html","id":"plot-the-grid-showing-the-nafo-boundaries-","dir":"Articles","previous_headings":"Make square grids","what":"Plot the grid, showing the NAFO boundaries.","title":"Working with raster objects","text":"Notice grid cells without assigned NAFO divisions centers fall outside NAFO borders.","code":"# get NAFO boundaries naf<-get_shapefile('nafo.clipped') #> Source: https://www.nafo.int naf<-terra::project(naf, '+proj=utm +zone=20 +datum=NAD83 +units=km +no_defs')  ggplot()+   geom_tile(data=grid,aes(X,Y,fill=nafo.assigned))+   geom_spatvector(data=naf,fill=NA)"},{"path":"https://jolenesutton.github.io/gslSpatial/articles/working_with_rasters.html","id":"restrict-by-location-and-depth","dir":"Articles","previous_headings":"Make square grids","what":"Restrict by location and depth","title":"Working with raster objects","text":"Restrict NAFO 4T Use function get_depth estimate depth meters. Use ?gslSpatial::get_depth details. Remove grid cells depths shallower 5 meters.","code":"grid<-grid[which(grid$nafo.assigned==\"4T\"),]  depth<-get_depth(grid$longitude,grid$latitude,\"epsg:4269\") #> The default argument assumes your points have crs NAD83 - EPSG:4269. #> Assigning depths based on GEBCO_2024, www.gebco.net. grid$depth<-unlist(depth) str(grid) #> 'data.frame':    1169 obs. of  7 variables: #>  $ X            : num  189 199 209 219 159 ... #>  $ Y            : num  5481 5481 5481 5481 5471 ... #>  $ area         : num  63 100 100 100 61 69 68 100 100 100 ... #>  $ longitude    : num  -67.3 -67.1 -67 -66.9 -67.7 ... #>  $ latitude     : num  49.4 49.4 49.4 49.4 49.3 ... #>  $ nafo.assigned: chr  \"4T\" \"4T\" \"4T\" \"4T\" ... #>  $ depth        : num  -11 -185 -289.9 -296 -35.9 ...  grid<-grid[-which(grid$depth>(-5)),]  ggplot()+   geom_tile(data=grid,aes(X,Y,fill=depth))+   geom_spatvector(data=naf,fill=NA)+   scale_fill_viridis_c()"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jolenesutton.github.io/gslSpatial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jolene T. Sutton. Author, maintainer. Lysandre Landry. Author.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sutton JT, Landry L (2024). gslSpatial: R package assist spatial analysis Gulf St. Lawrence region. R package version 0.0.0.9000, https://jolenesutton.github.io/gslSpatial/, https://github.com/JoleneSutton/gslSpatial.","code":"@Manual{,   title = {gslSpatial: An R package to assist with spatial analysis in the Gulf of St. Lawrence region},   author = {Jolene T. Sutton and Lysandre Landry},   year = {2024},   note = {R package version 0.0.0.9000, https://jolenesutton.github.io/gslSpatial/},   url = {https://github.com/JoleneSutton/gslSpatial}, }"},{"path":"https://jolenesutton.github.io/gslSpatial/index.html","id":"gslspatial-","dir":"","previous_headings":"","what":"An R package to assist with spatial analysis in the Gulf of St. Lawrence region","title":"An R package to assist with spatial analysis in the Gulf of St. Lawrence region","text":"gslSpatial provides tools assist spatial analysis Gulf St. Lawrence Region. Descriptions available functions, data, stored shapefiles .","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package to assist with spatial analysis in the Gulf of St. Lawrence region","text":"gslSpatial requires package eclectic. install gslSpatial, eclectic package also installed. install gslSpatial, use:","code":"# install.packages(\"devtools\") devtools::install_github(\"JoleneSutton/gslSpatial\")"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/aggregate_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute summary statistics of variables in a data frame for each polygon in a shapefile — aggregate_polygons","title":"Compute summary statistics of variables in a data frame for each polygon in a shapefile — aggregate_polygons","text":"Note data points overlap polygons ignored.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/aggregate_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute summary statistics of variables in a data frame for each polygon in a shapefile — aggregate_polygons","text":"","code":"aggregate_polygons(x, y, var, polygons, polygons.var, fun)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/aggregate_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute summary statistics of variables in a data frame for each polygon in a shapefile — aggregate_polygons","text":"x X-coordinates point data. CRS match polygons y Y-coordinates point data. CRS match polygons var Variable summarise polygons SpatVector geometry polygons polygons.var Attribute (column) polygons used identify polygon fun function compute summary statistics","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/aggregate_polygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute summary statistics of variables in a data frame for each polygon in a shapefile — aggregate_polygons","text":"","code":"#library(terra) #library(ggplot2) #library(tidyterra) #f <- system.file(\"ex/lux.shp\", package=\"terra\") #polygons <- vect(f) #set.seed(3241) #points <- spatSample(polygons, 10) #values(points) <- sample(1:10,length(points),replace=TRUE) #points<-as.data.frame(points,geom='xy')#because I normally have data in data frames #head(points) #ggplot()+ #tidyterra::geom_spatvector(data=polygons)+ #tidyterra::geom_spatvector_text(data=polygons,aes(label=NAME_2))+ #geom_text(data=points,aes(x,y,label=value),nudge_y = -.015) #names(polygons) #test<-aggregate_polygons(points$x,points$y,points$val,polygons,polygons.var='NAME_2',sum) #test<-aggregate_polygons(points$x,points$y,points$val,polygons,polygons.var='NAME_2',max) #test<-aggregate_polygons(points$x,points$y,points$val,polygons,polygons.var='NAME_2',length) #test #ggplot()+ #geom_spatvector(data=test,aes(fill=fun))+ #geom_spatvector_text(data=test,aes(label=fun))+ #geom_spatvector_text(data=test,aes(label=NAME_2),nudge_y = .015)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/aggregate_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute summary statistics of variables in a data frame for each raster grid cell — aggregate_raster","title":"Compute summary statistics of variables in a data frame for each raster grid cell — aggregate_raster","text":"Note data points outside grid area ignored.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/aggregate_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute summary statistics of variables in a data frame for each raster grid cell — aggregate_raster","text":"","code":"aggregate_raster(df, var, fun, grid, out = NULL)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/aggregate_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute summary statistics of variables in a data frame for each raster grid cell — aggregate_raster","text":"df Data frame columns X Y UTM coordinates. Coordinate reference system df match coordinate reference system grid var Variable(s) df summarize fun function compute summary statistics grid Either data frame raster grid cells columns X Y UTM coordinates, RasterLayer (package raster). Coordinate reference system df match coordinate reference system grid Option return SpatRaster (default) data frame. data.frame, use ='df'.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/aggregate_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute summary statistics of variables in a data frame for each raster grid cell — aggregate_raster","text":"SpatRaster data frame","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/aggregate_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute summary statistics of variables in a data frame for each raster grid cell — aggregate_raster","text":"","code":"x<-aggregate_raster(dat.rv,c(\"whake.kg.tow\",'redfish.kg.tow'),sum,pgrid4,out='df') head(x) #>              X        Y whake.kg.tow redfish.kg.tow #> 26830 427.9978 5441.911     6.549223       571.4963 #> 27116 423.9978 5437.911     1.833807       398.4498 #> 27118 431.9978 5437.911     2.419121      1777.5936 #> 27404 427.9978 5433.911    12.073557       573.3970 #> 27408 443.9978 5433.911     5.551337       931.4065 #> 27690 423.9978 5429.911    12.071751       352.3210 x2<-aggregate_raster(dat.rv,c(\"whake.kg.tow\",'redfish.kg.tow'),sum,pgrid4) x2 #> class       : SpatRaster  #> dimensions  : 191, 287, 3  (nrow, ncol, nlyr) #> resolution  : 4, 4  (x, y) #> extent      : -126.0022, 1021.998, 5051.911, 5815.911  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> names       :   ID, whake.kg.tow, redfish.kg.tow  #> min values  :    1,       0.0000,          0.000  #> max values  : 4350,     200.8836,       6811.538"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_secr.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign points to polygon using package secr — assign_points_secr","title":"Assign points to polygon using package secr — assign_points_secr","text":"applying function, make sure CRS polygon matches CRS data points. Returns dataframe. column polygon 1 0 indicating whether point falls within polygon. also column indicate polygon(s) point assigned . USE INSTEAD assign_points_terra OVERLAPPING POLYGONS.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_secr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign points to polygon using package secr — assign_points_secr","text":"","code":"assign_points_secr(x, y, polygon, polygon.label)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_secr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign points to polygon using package secr — assign_points_secr","text":"x X coordinate (e.g., longitude) CRS polygon y Y coordinate (e.g., latitude) CRS polygon polygon Spatvector geometry polygons polygon.label layer containing name polygon Spatvector","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_secr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign points to polygon using package secr — assign_points_secr","text":"Returns dataframe nrow = df. column polygon 1 0 indicating whether point falls within polygon. also column indicate polygon(s) point assigned . Data frame","code":""},{"path":[]},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_secr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign points to polygon using package secr — assign_points_secr","text":"","code":"#poly<-get_shapefile('nafo.clipped') #df2<-assign_points_secr(dat.ziff[1:50,'longitude'],dat.ziff[1:50,'latitude'],poly,\"Label\") #head(df2)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_terra.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign points to polygon using package terra — assign_points_terra","title":"Assign points to polygon using package terra — assign_points_terra","text":"applying function, make sure CRS polygon matches CRS data points. point must belong one polygon, otherwise see assign_points_secr. Returns original data frame new column assigned polygon. OVERLAPPING POLYGONS, USE assign_points_secr INSTEAD.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_terra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign points to polygon using package terra — assign_points_terra","text":"","code":"assign_points_terra(x, y, polygon)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_terra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign points to polygon using package terra — assign_points_terra","text":"x X coordinate (e.g., longitude) CRS polygon y Y coordinate (e.g., latitude) CRS polygon polygon Spatvector geometry polygons","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_terra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign points to polygon using package terra — assign_points_terra","text":"Data frame","code":""},{"path":[]},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_terra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign points to polygon using package terra — assign_points_terra","text":"","code":"#poly<-get_shapefile('nafo.clipped') #df2<-assign_points_terra(dat.ziff[1:50,'longitude'],dat.ziff[1:50,'latitude'],poly) #head(df2)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_to_nearest_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"For points that are not within polygons, find the nearest polygon edge — assign_points_to_nearest_polygon","title":"For points that are not within polygons, find the nearest polygon edge — assign_points_to_nearest_polygon","text":"points within polygons, find nearest polygon edge","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_to_nearest_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For points that are not within polygons, find the nearest polygon edge — assign_points_to_nearest_polygon","text":"","code":"assign_points_to_nearest_polygon(x, y, polygon, layer)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_to_nearest_polygon.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"For points that are not within polygons, find the nearest polygon edge — assign_points_to_nearest_polygon","text":"https://stackoverflow.com/questions/72561812/return-polygon-nearest---point-using-terra--r","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_to_nearest_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For points that are not within polygons, find the nearest polygon edge — assign_points_to_nearest_polygon","text":"x X-coordinates (must crs polygon) y Y-coordinates (must crs polygon) polygon spatvector geometry polygons layer name polygon layer containing polygon identities","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_to_nearest_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For points that are not within polygons, find the nearest polygon edge — assign_points_to_nearest_polygon","text":"data frame","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_to_nearest_polygon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"For points that are not within polygons, find the nearest polygon edge — assign_points_to_nearest_polygon","text":"Robert Hijmans (package terra)","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/assign_points_to_nearest_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For points that are not within polygons, find the nearest polygon edge — assign_points_to_nearest_polygon","text":"","code":"v <- terra::vect(system.file(\"ex/lux.shp\", package=\"terra\")) pts <- matrix(c(5.812,6.577,5.864,50.126,49.774,49.488), ncol=2) assign_points_to_nearest_polygon(pts[,1],pts[,2],v,'NAME_2') #>       x      y           NAME_2 n$distance #> 1 5.812 50.126         Clervaux   6691.933 #> 2 6.577 49.774       Echternach   4290.021 #> 3 5.864 49.488 Esch-sur-Alzette   1473.792"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/clean_ziff_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean ziff dates — clean_ziff_dates","title":"Clean ziff dates — clean_ziff_dates","text":"Retains original data columns, adds columns updated dates. Step 1) cases date.landed \"000000\" missing, date.caught inferred true date landed Step 2) remaining cases, date.landed came earlier date.caught, date.caught inferred true date landed Step 3) cases date.caught \"000000\" missing, date.landed.updated inferred true date caught","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/clean_ziff_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean ziff dates — clean_ziff_dates","text":"","code":"clean_ziff_dates(x)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/clean_ziff_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean ziff dates — clean_ziff_dates","text":"x data frame columns 'date.landed' 'date.caught'","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/clean_ziff_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean ziff dates — clean_ziff_dates","text":"Data frame","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/clean_ziff_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean ziff dates — clean_ziff_dates","text":"","code":"clean_ziff_dates(dat.ziff[1:5,]) #>  #>  #> 0 missing 'date.landed' were updated to match 'date.caught' #>  #>  #> 0 'date.landed' that came before 'date.caught' were  #> updated to match date.caught #>  #>  #> 0 missing 'date.caught' were updated to match 'date.landed.updated' #>                X        Y                           ancfvn date.landed #> 6546100 693.6942 5235.246 de5f2296360a32a07b1868e68be0b8a8    20200427 #> 6547100 692.4206 5233.647 de5f2296360a32a07b1868e68be0b8a8    20200427 #> 6548100 692.4206 5233.647 de5f2296360a32a07b1868e68be0b8a8    20200427 #> 6549100 700.2428 5243.853 de5f2296360a32a07b1868e68be0b8a8    20200413 #> 6550100 700.2428 5243.853 de5f2296360a32a07b1868e68be0b8a8    20200413 #>         species.code round.weight main.species.caught main.species.sought #> 6546100          130          141                 130                 130 #> 6547100          170            1                 130                 130 #> 6548100          130           70                 130                 130 #> 6549100          100           52                 100                 100 #> 6550100          130           43                 100                 100 #>         date.caught latitude longitude gear.class year year.landed month.landed #> 6546100    20200427  47.2421  -60.4406        LLS 2020        2020            4 #> 6547100    20200427  47.2281  -60.4581        LLS 2020        2020            4 #> 6548100    20200427  47.2281  -60.4581        LLS 2020        2020            4 #> 6549100    20200413  47.3175  -60.3503        LLS 2020        2020            4 #> 6550100    20200413  47.3175  -60.3503        LLS 2020        2020            4 #>         day.landed date.landed.updated date.caught.updated year.caught.updated #> 6546100         27            20200427            20200427                2020 #> 6547100         27            20200427            20200427                2020 #> 6548100         27            20200427            20200427                2020 #> 6549100         13            20200413            20200413                2020 #> 6550100         13            20200413            20200413                2020 #>         month.caught.updated day.caught.updated year.landed.updated #> 6546100                   04                 27                2020 #> 6547100                   04                 27                2020 #> 6548100                   04                 27                2020 #> 6549100                   04                 13                2020 #> 6550100                   04                 13                2020 #>         month.landed.updated day.landed.updated #> 6546100                   04                 27 #> 6547100                   04                 27 #> 6548100                   04                 27 #> 6549100                   04                 13 #> 6550100                   04                 13"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/coastline.html","id":null,"dir":"Reference","previous_headings":"","what":"Coastline shapefile — coastline","title":"Coastline shapefile — coastline","text":"shapefile coastline. Accessed get_shapefile('coastline')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/coastline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coastline shapefile — coastline","text":"","code":"coastline"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/coastline.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Coastline shapefile — coastline","text":"Retrieved class SpatVector get_shapefile('coastline')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/convert_dms_to_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert coordinates from degrees minutes seconds to decimal degrees — convert_dms_to_dd","title":"Convert coordinates from degrees minutes seconds to decimal degrees — convert_dms_to_dd","text":"Convert coordinates degrees minutes seconds decimal degrees","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/convert_dms_to_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert coordinates from degrees minutes seconds to decimal degrees — convert_dms_to_dd","text":"","code":"convert_dms_to_dd(x = NULL, deg = NULL, min = NULL, sec = NULL)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/convert_dms_to_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert coordinates from degrees minutes seconds to decimal degrees — convert_dms_to_dd","text":"x Coordinate format dms. May numeric character deg Degrees. Default NULL min Minutes. Default NULL sec Seconds. Default NULL","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/convert_dms_to_dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert coordinates from degrees minutes seconds to decimal degrees — convert_dms_to_dd","text":"","code":"convert_dms_to_dd(x=454532.4) #> [1] 45.759 convert_dms_to_dd(x=\"454532.4\") #> [1] 45.759 convert_dms_to_dd(x=\"45° 45’ 32.4\") #> [1] 45.759 convert_dms_to_dd(deg=45, min=45, sec=32.4) #> [1] 45.759"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/dat.rv.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data set: Research Vessel (RV) Survey — dat.rv","title":"Example data set: Research Vessel (RV) Survey — dat.rv","text":"example data set containing spatial information fish species catch densities (kg/tow). useful formal analysis!","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/dat.rv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data set: Research Vessel (RV) Survey — dat.rv","text":"","code":"dat.rv"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/dat.rv.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data set: Research Vessel (RV) Survey — dat.rv","text":"data frame 1371 rows 11 variables: X Easting, UTM NAD83, Zone:20N, Units:km Y Northing, UTM NAD83, Zone:20N, Units:km longitude decimal degrees, NAD83, EPSG:4269 latitude decimal degrees, NAD83, EPSG:4269 year survey year depth depth tow meters whake.kg.tow catch density White Hake redfish.kg.tow catch density Redfish ahalibut.kg.tow catch density Atlantic Halibut ghalibut.kg.tow catch density Greenland Halibut witch.kg.tow catch density Witch Flounder","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/dat.visreg.fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of visreg fits — dat.visreg.fits","title":"Data frame of visreg fits — dat.visreg.fits","text":"Example data frame","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/dat.visreg.fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of visreg fits — dat.visreg.fits","text":"","code":"dat.visreg.fits"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/dat.visreg.fits.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of visreg fits — dat.visreg.fits","text":"data frame 101 rows 2 variables.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/dat.ziff.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data set: Commercial Landings — dat.ziff","title":"Example data set: Commercial Landings — dat.ziff","text":"example data set containing spatial information species catch weights. useful formal analysis!","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/dat.ziff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data set: Commercial Landings — dat.ziff","text":"","code":"dat.ziff"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/dat.ziff.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data set: Commercial Landings — dat.ziff","text":"data frame 4559 rows 16 variables: X Easting, UTM NAD83, Zone:20N, Units:km Y Northing, UTM NAD83, Zone:20N, Units:km ancfvn Anonymised cfvn date.landed date.landed species.code species.code round.weight round.weight main.species.caught main.species.caught main.species.sought main.species.sought date.caught date.caught latitude decimal degrees, NAD83, EPSG:4269 longitude decimal degrees, NAD83, EPSG:4269 gear.class gear.class year year year.landed year.landed month.landed month.landed day.landed day.landed","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/format_grid_manually.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually format a prediction grid — format_grid_manually","title":"Manually format a prediction grid — format_grid_manually","text":"Returns data frame","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/format_grid_manually.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually format a prediction grid — format_grid_manually","text":"","code":"format_grid_manually(grid, rep.var = NULL, depth.var = NULL, median.var = NULL)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/format_grid_manually.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually format a prediction grid — format_grid_manually","text":"grid prediction grid row unique rep.var variable repeat rows grid, e.g., year depth.var grid needs column 'depth_scaled', depth.var depths used original scaling, e.g., data set fitted model median.var grid needs column common level predictor, median.var comes original data model fitted ","code":""},{"path":[]},{"path":"https://jolenesutton.github.io/gslSpatial/reference/format_grid_manually.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually format a prediction grid — format_grid_manually","text":"","code":"tmp<-pgrid4[1:3,] set.seed(678) mv<-sample(c('a','b'),3,replace=TRUE) names(sort(table(mv),decreasing=TRUE)[1]) #> [1] \"b\" dv<-sample(100:500,50) format_grid_manually(tmp,rep.var=c(2002,2003),median.var=mv,depth.var=dv) #>               X        Y  area longitude latitude nafo.assigned     depth #> 281    995.9978 5813.911  1.12 -55.72939 52.25112          <NA> -1.008069 #> 282    999.9978 5813.911  7.52 -55.67128 52.24751            4R -1.996786 #> 283   1003.9978 5813.911 10.72 -55.61317 52.24387            4R -3.000000 #> 281.1  995.9978 5813.911  1.12 -55.72939 52.25112          <NA> -1.008069 #> 282.1  999.9978 5813.911  7.52 -55.67128 52.24751            4R -1.996786 #> 283.1 1003.9978 5813.911 10.72 -55.61317 52.24387            4R -3.000000 #>       rep.var median.var depth_scaled #> 281      2002          b    -2.705102 #> 282      2002          b    -2.713919 #> 283      2002          b    -2.722865 #> 281.1    2003          b    -2.705102 #> 282.1    2003          b    -2.713919 #> 283.1    2003          b    -2.722865"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/get_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get depths associated with longitude and latitude — get_depth","title":"Get depths associated with longitude and latitude — get_depth","text":"Returns depths meters. bathymetry reference used GEBCO_2024, www.gebco.net.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/get_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get depths associated with longitude and latitude — get_depth","text":"","code":"get_depth(lon, lat, crs = \"epsg:4269\")"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/get_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get depths associated with longitude and latitude — get_depth","text":"lon Longitude decimal degrees lat Latitude decimal degrees crs Coordinate reference system lon lat. Default NAD83, EPSG:4269","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/get_shapefile.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a stored shapefile — get_shapefile","title":"Retrieve a stored shapefile — get_shapefile","text":"Imports stored shapefile SpatVector (terra).","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/get_shapefile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a stored shapefile — get_shapefile","text":"","code":"get_shapefile(x)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/get_shapefile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a stored shapefile — get_shapefile","text":"x Either \"nafo\", \"nafo.clipped\", \"mpa\", \"oecm\",\"hex\",'rv.winter', 'rv.sgsl', 'coastline'. \"nafo\" shapefile clipped land. \"nafo.clipped\" shapefile clipped land. 'hex' shapefile hexagonal grid used fisheriescape project.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/get_shapefile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a stored shapefile — get_shapefile","text":"Returns SpatVector","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/get_shapefile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a stored shapefile — get_shapefile","text":"","code":"naf<-get_shapefile('nafo.clipped') #> Source: https://www.nafo.int naf #>  class       : SpatVector  #>  geometry    : polygons  #>  dimensions  : 5, 6  (geometries, attributes) #>  extent      : -71.21003, -55.42664, 45.60208, 52.25  (xmin, xmax, ymin, ymax) #>  coord. ref. : lon/lat NAD83 (EPSG:4269)  #>  names       : Label SubArea Division SubDiv SubSubDiv Shape_Area #>  type        : <chr>   <chr>    <chr>  <chr>     <chr>      <num> #>  values      :   3Pn       3       3P    3Pn        NA      0.852 #>                   4R       4       4R     NA        NA      5.072 #>                   4S       4       4S     NA        NA      10.24"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/gslSpatial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gslSpatial: An R package to assist with spatial analysis in the Gulf of St. Lawrence region — gslSpatial-package","title":"gslSpatial: An R package to assist with spatial analysis in the Gulf of St. Lawrence region — gslSpatial-package","text":"Provides tools assists spatial analysis Research Vessel Landings data Gulf Region. Several functions tailored use package `sdmTMB` (See Anderson et al. (2024) doi:10.1101/2022.03.24.485545 .) functions require `sdmTMB` useful general spatial applications.","code":""},{"path":[]},{"path":"https://jolenesutton.github.io/gslSpatial/reference/gslSpatial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gslSpatial: An R package to assist with spatial analysis in the Gulf of St. Lawrence region — gslSpatial-package","text":"Maintainer: Jolene T. Sutton jolene.sutton@gmail.com Authors: Lysandre Landry","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/hex.html","id":null,"dir":"Reference","previous_headings":"","what":"Hexagonal grid, 10x10km — hex","title":"Hexagonal grid, 10x10km — hex","text":"shapefile created fisheriescape project, restricted 3Pn4RSTVn. Accessed get_shapefile('hex')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hexagonal grid, 10x10km — hex","text":"","code":"hex"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/hex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hexagonal grid, 10x10km — hex","text":"Retrieved class SpatVector get_shapefile('hex')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/make_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a prediction grid for the Gulf Region — make_grid","title":"Make a prediction grid for the Gulf Region — make_grid","text":"Returns data frame coordinates equidistant one another (raster grid cells), along associated NAFO divisions 3Pn4RSTVn. coordinates centers grid cells. Longitude latitude coordinates NAD83, EPSG:4269, decimal degrees. X Y coordinates NAD83, UTM zone 20N, km.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/make_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a prediction grid for the Gulf Region — make_grid","text":"","code":"make_grid(res)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/make_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a prediction grid for the Gulf Region — make_grid","text":"res User defined grid resolution e.g., specifying 4 produce 4x4km grid sizes","code":""},{"path":[]},{"path":"https://jolenesutton.github.io/gslSpatial/reference/make_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a prediction grid for the Gulf Region — make_grid","text":"","code":"#pgrid<-make_grid(20) #ggplot()+geom_raster(data=pgrid,aes(X,Y,fill=nafo.assigned))"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/make_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Make polygons from a data frame of spatial coordinates — make_polygon","title":"Make polygons from a data frame of spatial coordinates — make_polygon","text":"Make polygons data frame spatial coordinates","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/make_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make polygons from a data frame of spatial coordinates — make_polygon","text":"","code":"make_polygon(df, x, y, grp.cols, crs)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/make_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make polygons from a data frame of spatial coordinates — make_polygon","text":"df data frame spatial coordinates x Name column x coordinates (e.g., longitude). Must order. y Name column y coordinates (e.g., latitude). Must order. grp.cols Index columns dplyr::group_by. Must index least one variable, used identify polygons. crs coordinate reference system assign","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/make_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make polygons from a data frame of spatial coordinates — make_polygon","text":"Returns SpatVector","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/make_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make polygons from a data frame of spatial coordinates — make_polygon","text":"","code":"x<-c(-65,-60,-55, -61,-60,-59) y<-c( 47, 50, 47,  48, 49, 48) grp<-c(rep('big triangle',3),rep('small triangle',3)) source<-c(1,1,1,3,3,3) d<-cbind.data.frame(x,y,grp,source) d #>     x  y            grp source #> 1 -65 47   big triangle      1 #> 2 -60 50   big triangle      1 #> 3 -55 47   big triangle      1 #> 4 -61 48 small triangle      3 #> 5 -60 49 small triangle      3 #> 6 -59 48 small triangle      3 pol<-make_polygon(d,'x','y',c('grp','source'),4326) terra::plot(pol)"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/mpa.html","id":null,"dir":"Reference","previous_headings":"","what":"Oceans Act Marine Protected Areas shapefile — mpa","title":"Oceans Act Marine Protected Areas shapefile — mpa","text":"shapefile sourced https://open.canada.ca, restricted 3Pn4RSTVn. Accessed get_shapefile('mpa')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/mpa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oceans Act Marine Protected Areas shapefile — mpa","text":"","code":"mpa"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/mpa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Oceans Act Marine Protected Areas shapefile — mpa","text":"Retrieved class SpatVector get_shapefile('mpa')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/nafo.clipped.html","id":null,"dir":"Reference","previous_headings":"","what":"Northwest Atlantic Fisheries Organization (NAFO) shapefile, clipped to land — nafo.clipped","title":"Northwest Atlantic Fisheries Organization (NAFO) shapefile, clipped to land — nafo.clipped","text":"shapefile sourced https://www.nafo.int, restricted 3Pn4RSTVn. Accessed get_shapefile('nafo.clipped')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/nafo.clipped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Northwest Atlantic Fisheries Organization (NAFO) shapefile, clipped to land — nafo.clipped","text":"","code":"nafo.clipped"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/nafo.clipped.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Northwest Atlantic Fisheries Organization (NAFO) shapefile, clipped to land — nafo.clipped","text":"Retrieved class SpatVector get_shapefile('nafo.clipped')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/nafo.unclipped.html","id":null,"dir":"Reference","previous_headings":"","what":"Northwest Atlantic Fisheries Organization (NAFO) shapefile, not clipped to land — nafo.unclipped","title":"Northwest Atlantic Fisheries Organization (NAFO) shapefile, not clipped to land — nafo.unclipped","text":"shapefile sourced https://www.nafo.int, restricted 3Pn4RSTVn. Accessed get_shapefile('nafo')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/nafo.unclipped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Northwest Atlantic Fisheries Organization (NAFO) shapefile, not clipped to land — nafo.unclipped","text":"","code":"nafo.unclipped"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/nafo.unclipped.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Northwest Atlantic Fisheries Organization (NAFO) shapefile, not clipped to land — nafo.unclipped","text":"Retrieved class SpatVector get_shapefile('nafo')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/oecm.html","id":null,"dir":"Reference","previous_headings":"","what":"Other Effective Area-Based Conservation Measures shapefile — oecm","title":"Other Effective Area-Based Conservation Measures shapefile — oecm","text":"shapefile sourced https://open.canada.ca, restricted 3Pn4RSTVn. Accessed get_shapefile('oecm')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/oecm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Other Effective Area-Based Conservation Measures shapefile — oecm","text":"","code":"oecm"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/oecm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Other Effective Area-Based Conservation Measures shapefile — oecm","text":"Retrieved class SpatVector get_shapefile('oecm')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/pgrid4.html","id":null,"dir":"Reference","previous_headings":"","what":"An example prediction grid for the Gulf of St. Lawrence — pgrid4","title":"An example prediction grid for the Gulf of St. Lawrence — pgrid4","text":"grid covering 4Pn4RSTVn 4x4km grid cells.","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/pgrid4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example prediction grid for the Gulf of St. Lawrence — pgrid4","text":"","code":"pgrid4"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/pgrid4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example prediction grid for the Gulf of St. Lawrence — pgrid4","text":"data frame 18885 rows 7 variables: X Easting, UTM NAD83, Zone:20N, Units:km Y Northing, UTM NAD83, Zone:20N, Units:km area Area grid cell longitude decimal degrees, NAD83, EPSG:4269 latitude decimal degrees, NAD83, EPSG:4269 nafo.assigned NAFO division subdivision depth Depth meters, based bathymetry reference GEBCO 2024","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/rv.sgsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Southern Gulf of St. Lawrence September Research Vessel Survey — rv.sgsl","title":"Southern Gulf of St. Lawrence September Research Vessel Survey — rv.sgsl","text":"shapefile boundaries Southern Gulf St. Lawrence September Research Vessel Survey. Accessed get_shapefile('rv.sgsl')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/rv.sgsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Southern Gulf of St. Lawrence September Research Vessel Survey — rv.sgsl","text":"","code":"rv.sgsl"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/rv.sgsl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Southern Gulf of St. Lawrence September Research Vessel Survey — rv.sgsl","text":"Retrieved class SpatVector get_shapefile('rv.sgsl')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/rv.winter.html","id":null,"dir":"Reference","previous_headings":"","what":"Gulf of St. Lawrence Winter Research Vessel Survey — rv.winter","title":"Gulf of St. Lawrence Winter Research Vessel Survey — rv.winter","text":"shapefile boundaries Gulf St. Lawrence Winter Research Vessel Survey. Accessed get_shapefile('rv.winter')","code":""},{"path":"https://jolenesutton.github.io/gslSpatial/reference/rv.winter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gulf of St. Lawrence Winter Research Vessel Survey — rv.winter","text":"","code":"rv.winter"},{"path":"https://jolenesutton.github.io/gslSpatial/reference/rv.winter.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gulf of St. Lawrence Winter Research Vessel Survey — rv.winter","text":"Retrieved class SpatVector get_shapefile('rv.winter')","code":""},{"path":[]},{"path":"https://jolenesutton.github.io/gslSpatial/news/index.html","id":"id_2024-development-version","dir":"Changelog","previous_headings":"","what":"2024-11-19","title":"gslSpatial (development version)","text":"Create package","code":""}]
